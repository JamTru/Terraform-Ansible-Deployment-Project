name: Foo Pipeline
run-name: Pipeline Ran On ${{github.ref_name}} by ${{github.actor}}
on:
  push:
    branches:
      - main

jobs:
  setup-credentials:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug AWS Secrets
        run: |
          echo "Access Key ID is set: ${{ vars.AWS_ACCESS_KEY_ID != '' }}"
          echo "Secret Access Key is set: ${{ vars.AWS_SECRET_ACCESS_KEY != '' }}"
          echo "Session Token is set: ${{ vars.AWS_SESSION_TOKEN != '' }}"

      - name: Set Up AWS Cli
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-session-token: ${{vars.AWS_SESSION_TOKEN}}

      - name: Test AWS Credentials
        run: aws sts get-caller-identity

  terraform-infra:
    runs-on: ubuntu-latest
    needs: setup-credentials
    defaults:
      run:
        working-directory: ./terraform-infra
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set Up AWS Cli
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-session-token: ${{vars.AWS_SESSION_TOKEN}}

    - name: Get Public IP Address
      id: get_ip
      run: echo "ip_address=$(curl -s icanhazip.com)" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Initialise Terraform
      id: terraform-init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var="my_ip_address=${{ env.ip_address }}" -out=tfplan

    - name: Check for Changes
      run: |
        if ! terraform show -json tfplan | jq '.resource_changes | length' | grep -q '0'; then
          echo "Changes detected. Applying Terraform configuration."
          terraform apply -auto-approve tfplan
        else
          echo "No changes detected. Exiting."
          exit 0
        fi

    - name: Set Terraform Outputs
      id: outputs
      run: |
        echo "ini_file=$(terraform output ini_file)" >> $GITHUB_ENV
        echo "app_dns=$(terraform output -raw app_public_hostname)" >> $GITHUB_ENV
        echo "app_ip=$(terraform output -raw app_public_ip)" >> $GITHUB_ENV
        echo "db_dns=$(terraform output -raw db_public_hostname)" >> $GITHUB_ENV
        echo "db_ip=$(terraform output -raw db_public_ip)" >> $GITHUB_ENV

  ansible-execute:
    runs-on: ubuntu-latest
    needs: terraform-infra
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Run Ansible playbook
      uses: dawidd6/action-ansible-playbook@v2.8.0
    - name: Generate INI File
      run: |
        ini_content="
        [app]
        app1 ansible_host=${{ env.app_dns }} app_ip=${{ env.app_ip }}

        [database]
        db1 ansible_host=${{ env.db_dns }} db_ip=${{ env.db_ip }}
        "
        echo "$ini_content" > terraform-infra/${{ env.ini_file }}
        mv terraform-infra/'"inventory.ini"' terraform-infra/inventory.ini
    - name: Run Ansible Playbook for Database
      uses: dawidd6/action-ansible-playbook@v2
      with:
        inventory: terraform-infra/inventory.ini
        playbook: ansible/database-playbook.yml
        private_key: ${{secrets.SSH_PRIVATE_KEY}}

    - name: Run Ansible Playbook for Application
      uses: imranismail/run-ansible-playbook@v1
      with:
        inventory: terraform-infra/inventory.ini
        playbook: ansible/app-playbook.yml
        private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        extra_args: "-e app_image=mattcul/assignment2app:1.0.0"
